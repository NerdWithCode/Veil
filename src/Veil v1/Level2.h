#ifndef LEVEL_2
#define LEVEL_2

#include "Level class.h"

Real_Coords gOf(suint x, suint y){
	return Real_Coords((x * 60) + 30, (y * 60) + 30);
}

Level_Map* getLevel2(sf::Texture& tex, std::vector<sf::Sprite>& decorations){
	bool* gameover = new bool(false);

	std::vector<std::vector<suint>> map{
		//		0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
		/* 0*/{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		/* 1*/{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		/* 2*/{ 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		/* 3*/{ 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 5, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		/* 4*/{ 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		/* 5*/{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		/* 6*/{ 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		/* 7*/{ 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		/* 8*/{ 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		/* 9*/{ 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		/*10*/{ 1, 1, 1, 1, 0, 2, 0, 0, 0, 2, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1 },
		/*11*/{ 1, 1, 1, 1, 0, 2, 0, 0, 0, 2, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 3, 0, 0, 1, 1, 1, 1, 1 },
		/*12*/{ 1, 1, 1, 1, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1 },
		/*13*/{ 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1 },
		/*14*/{ 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1 },
		/*15*/{ 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 },
		/*16*/{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 },
		/*17*/{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 },
		/*18*/{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 },
		/*19*/{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 },
		/*20*/{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 },
		/*21*/{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 },
		/*22*/{ 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1 },
		/*23*/{ 1, 1, 1, 0, 5, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1 },
		/*24*/{ 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1 },
		/*25*/{ 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1 },
		/*26*/{ 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 0, 0, 1 },
		/*27*/{ 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 0, 0, 1 },
		/*28*/{ 1, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 1, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1 },
		/*29*/{ 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 0, 0, 1 },
		/*30*/{ 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 5, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1 },
		/*31*/{ 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1 },
		/*32*/{ 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 },
		/*33*/{ 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1 },
		/*34*/{ 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1 },
		/*35*/{ 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1 },
		/*36*/{ 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 5, 0, 0, 1, 1, 1, 1 },
		/*37*/{ 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1 },
		/*38*/{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		/*39*/{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	};//		0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
	//x 20 16  y 8 14
	std::vector<Guardian_Base*> guardians{
		new Seeker(gOf(18, 18), std::vector < Real_Coords > {gOf(18, 19), gOf(21, 20), gOf(19, 22)}, gameover),
		new Seeker(gOf(33, 22), std::vector < Real_Coords > {gOf(33, 22), gOf(35, 24), gOf(33, 27), gOf(35, 29), gOf(33, 31)}, gameover),
		new Seeker(gOf(20, 12), std::vector < Real_Coords > {gOf(20, 15), gOf(20, 9), gOf(16, 9), gOf(16, 15)}, gameover),
		new Seeker(gOf(16, 12), std::vector < Real_Coords > {gOf(16, 9), gOf(16, 15), gOf(20, 15), gOf(20, 9)}, gameover),
		new Spectre(gOf(2, 2), std::vector<Real_Coords>{gOf(2, 5),gOf(2, 1), gOf(12, 1), gOf(12, 5)}, gameover),
		new Spectre(gOf(12, 4), std::vector < Real_Coords > {gOf(12, 1),gOf(12, 5), gOf(2, 5),gOf(2,1)}, gameover),
		new Spectre(gOf(13, 22), std::vector<Real_Coords>{gOf(13,22),gOf(28,19),gOf(23,28)},gameover),
		new Spectre(gOf(28, 19), std::vector < Real_Coords > {gOf(28, 19), gOf(23, 28), gOf(13, 22)},gameover),
		new Spectre(gOf(23, 28), std::vector<Real_Coords>{gOf(23, 28), gOf(13, 22), gOf(28,19)},gameover),
		new Spectre(gOf(33, 13), std::vector<Real_Coords>{gOf(33, 13), gOf(33,35)},gameover),
		new Stalker(gOf(37, 28), std::vector<Real_Coords>{gOf(35, 28), gOf(33, 28), gOf(33, 25), gOf(35, 25)},gameover),
		new Stalker(gOf(25, 12), std::vector<Real_Coords>{gOf(25, 12), gOf(26,12)},gameover),
		new Stalker(gOf(7, 11), std::vector < Real_Coords > {gOf(8, 11), gOf(6, 11)},gameover),
		new Stalker(gOf(2, 30), std::vector < Real_Coords > {gOf(4, 28), gOf(6, 37), gOf(9, 28), gOf(4,34)},gameover),
		new Stalker(gOf(18, 36), std::vector<Real_Coords>{gOf(15, 35), gOf(12, 37), gOf(10,29)},gameover)
	};
	std::vector<std::vector<Tile*>> tiles;

	std::vector<Tear*> tears;

	Real_Coords stairPosition;
	Virtual_Coords stairCoords;
	Real_Coords startPosition;
	for (size_t y = 0; y < map.size(); y++){
		std::vector<Tile*> row;
		for (size_t x = 0; x < map[y].size(); x++){
			switch (map[y][x]){
			case 0:
				row.push_back(new Tile(Real_Coords(x * 60, y * 60), tex, sf::IntRect(60, 0, 60, 60), false));
				break;
			case 1:
				row.push_back(new Tile(Real_Coords(x * 60, y * 60), tex, sf::IntRect(0, 0, 60, 60), true));
				break;
			case 2:
				row.push_back(new Breakable_Tile(Real_Coords(x * 60, y * 60), tex));
				break;
			case 3:
				row.push_back(nullptr);
				stairPosition = Real_Coords((x * 60) + 30, (y * 60) + 30);
				stairCoords = Virtual_Coords(x, y);
				break;
			case 4:
				row.push_back(new Tile(Real_Coords(x * 60, y * 60), tex, sf::IntRect(120, 0, 60, 60), false, tt_invunrable));
				startPosition = Real_Coords((x * 60) + 30, (y * 60) + 30);
				break;
			case 5:
				row.push_back(new Tile(Real_Coords(x * 60, y * 60), tex, sf::IntRect(60, 0, 60, 60), false));
				tears.push_back(new Tear(Real_Coords((x * 60) + 30, (y * 60) + 30)));
			}
		}
		tiles.push_back(row);
	}
	tiles[stairCoords.y][stairCoords.x] = new Stair_Tile(Real_Coords(stairCoords.x * 60, stairCoords.y * 60), tex, tears.size());


	Tile_Map* tileMap = new Tile_Map(tiles);

	return new Level_Map(tileMap, guardians, tears, startPosition, gameover, stairPosition, decorations);
}



#endif